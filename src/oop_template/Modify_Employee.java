/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_template;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTextField;



/**
 *
 * @author Jackh
 */
public class Modify_Employee extends javax.swing.JFrame {

    

    /**
     * Creates new form Modify_Employee
     * @author Jack Holmes (50053641)
     */
    public Modify_Employee() {
        initComponents();
        setLocationRelativeTo(null);
          
    }
    

public void setEmployeeDetails(Employee_Details employeeDetails) {
    txtEmployeeID.setText(Integer.toString(employeeDetails.getEmployeeID()));
    txtEmpTitle.setText(employeeDetails.getTitle());
    txtEmpForename.setText(employeeDetails.getForename());
    txtEmpSurname.setText(employeeDetails.getSurname());
    txtEmpGender.setText(employeeDetails.getGender());
    txtEmpJobTitle.setText(employeeDetails.getJobTitle());
    txtEmpContract.setText(Integer.toString(employeeDetails.getContractedHours()));
    txtEmpHourlyRate.setText(Integer.toString(employeeDetails.getHourlyRate()));
}


        /**
     * This method is called from within the constructor to initialize the form.WARNING: Do NOT modify this code.
     * The content of this method is always
 regenerated by the Form Editor.
     * @param evt
     */
    

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblModifyEmployee = new javax.swing.JLabel();
        pnlModifyEmployee = new javax.swing.JPanel();
        lblEmpTitle = new javax.swing.JLabel();
        lblEmployeeID1 = new javax.swing.JLabel();
        lblEmpForename = new javax.swing.JLabel();
        lblEmpSurname = new javax.swing.JLabel();
        lblEmpGender = new javax.swing.JLabel();
        lblEmpJobTitle = new javax.swing.JLabel();
        lblEmpContract = new javax.swing.JLabel();
        lblEmpHourlyRate = new javax.swing.JLabel();
        btnEmpSave = new javax.swing.JButton();
        btnEmpReset1 = new javax.swing.JButton();
        txtEmployeeID = new javax.swing.JTextField();
        txtEmpTitle = new javax.swing.JTextField();
        txtEmpForename = new javax.swing.JTextField();
        txtEmpSurname = new javax.swing.JTextField();
        txtEmpGender = new javax.swing.JTextField();
        txtEmpJobTitle = new javax.swing.JTextField();
        txtEmpContract = new javax.swing.JTextField();
        txtEmpHourlyRate = new javax.swing.JTextField();
        btnEmpMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        lblModifyEmployee.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        lblModifyEmployee.setText("Modify Employee");

        pnlModifyEmployee.setBackground(new java.awt.Color(153, 255, 255));
        pnlModifyEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblEmpTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpTitle.setText("Title:");

        lblEmployeeID1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmployeeID1.setText("Employee ID:");

        lblEmpForename.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpForename.setText("Forename:");

        lblEmpSurname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpSurname.setText("Surname:");

        lblEmpGender.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpGender.setText("Gender:");

        lblEmpJobTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpJobTitle.setText("Job Title:");

        lblEmpContract.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpContract.setText("Contracted Hours:");

        lblEmpHourlyRate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmpHourlyRate.setText("Hourly Rate:");

        btnEmpSave.setBackground(new java.awt.Color(0, 0, 0));
        btnEmpSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEmpSave.setForeground(new java.awt.Color(255, 255, 255));
        btnEmpSave.setText("Save");
        btnEmpSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpSaveActionPerformed(evt);
            }
        });

        btnEmpReset1.setBackground(new java.awt.Color(0, 0, 0));
        btnEmpReset1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEmpReset1.setForeground(new java.awt.Color(255, 255, 255));
        btnEmpReset1.setText("Reset");
        btnEmpReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpReset1ActionPerformed(evt);
            }
        });

        txtEmployeeID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmployeeID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmployeeIDKeyReleased(evt);
            }
        });

        txtEmpTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpTitleKeyReleased(evt);
            }
        });

        txtEmpForename.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpForename.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpForenameKeyReleased(evt);
            }
        });

        txtEmpSurname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpSurname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpSurnameKeyReleased(evt);
            }
        });

        txtEmpGender.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpGender.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpGenderKeyReleased(evt);
            }
        });

        txtEmpJobTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpJobTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpJobTitleKeyReleased(evt);
            }
        });

        txtEmpContract.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpContract.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpContractKeyReleased(evt);
            }
        });

        txtEmpHourlyRate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtEmpHourlyRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpHourlyRateKeyReleased(evt);
            }
        });

        btnEmpMenu.setBackground(new java.awt.Color(0, 0, 0));
        btnEmpMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEmpMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnEmpMenu.setText("Return Menu");
        btnEmpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlModifyEmployeeLayout = new javax.swing.GroupLayout(pnlModifyEmployee);
        pnlModifyEmployee.setLayout(pnlModifyEmployeeLayout);
        pnlModifyEmployeeLayout.setHorizontalGroup(
            pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblEmployeeID1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEmpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEmpHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEmpReset1)
                    .addComponent(lblEmpForename, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpGender, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpContract))
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEmpMenu)
                        .addGap(48, 48, 48))
                    .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                        .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnEmpSave))
                            .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmpHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtEmpForename, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmpSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmpGender, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmpJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmpContract, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(190, Short.MAX_VALUE))))
        );
        pnlModifyEmployeeLayout.setVerticalGroup(
            pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlModifyEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployeeID1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpForename, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpForename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpGender, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpContract, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpContract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlModifyEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEmpSave)
                    .addComponent(btnEmpReset1)
                    .addComponent(btnEmpMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(pnlModifyEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(lblModifyEmployee)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblModifyEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(pnlModifyEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * This is the empty button, this empties the text boxes.
     * @author Jack Holmes (50053641)
     */
    private void btnEmpReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpReset1ActionPerformed
        // TODO add your handling code here:
        txtEmployeeID.setText("");
        txtEmpTitle.setText("");
        txtEmpForename.setText("");
        txtEmpSurname.setText("");
        txtEmpGender.setText("");
        txtEmpJobTitle.setText("");
        txtEmpContract.setText("");
        txtEmpHourlyRate.setText("");
        
    }//GEN-LAST:event_btnEmpReset1ActionPerformed

    /**
     * This is the save button, this saves the employees details to the text file.
     * @author Jack Holmes (50053641)
     */
    private void btnEmpSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpSaveActionPerformed
    // Check if all text fields are filled
    if(txtEmployeeID.getText().isEmpty() || txtEmpTitle.getText().isEmpty() || txtEmpForename.getText().isEmpty()
            || txtEmpSurname.getText().isEmpty() || txtEmpGender.getText().isEmpty() || txtEmpJobTitle.getText().isEmpty()
            || txtEmpContract.getText().isEmpty() || txtEmpHourlyRate.getText().isEmpty()) {
        // Display a pop-up message if any text field is empty
        JOptionPane.showMessageDialog(null, "Please fill in all fields.");
    } else {
        // Check if the employee ID already exists in file
        boolean idExists = false;
        try {
            Scanner scanner = new Scanner(new File("storage/employee_data.txt"));
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] data = line.split(",");
                if (data[0].equals(txtEmployeeID.getText())) {
                    idExists = true;
                    break;
                }
            }
            scanner.close();
        } catch(IOException ex) {
            // Display a pop-up message if there is an error reading the file
            JOptionPane.showMessageDialog(null, "Error reading file.");
        }
        
        if (idExists) {
            // Ask the user if they want to overwrite the current employee data
            int choice = JOptionPane.showConfirmDialog(null, "Employee ID already exists. Do you want to overwrite the current employee data?", 
                                                        "Confirm Overwrite", JOptionPane.YES_NO_OPTION);

            if (choice == JOptionPane.YES_OPTION) {
                try {
                    // Read the contents of the file into a list
                    List<String> lines = Files.readAllLines(Paths.get("storage/employee_data.txt"), StandardCharsets.UTF_8);

                    // Read over the lines and modify the old employee data
                    for (int i = 0; i < lines.size(); i++) {
                        String[] parts = lines.get(i).split(",");
                        if (parts[0].equals(txtEmployeeID.getText())) {
                            lines.set(i, txtEmployeeID.getText() + "," + txtEmpTitle.getText() + "," + txtEmpForename.getText() + ","
                                    + txtEmpSurname.getText() + "," + txtEmpGender.getText() + "," + txtEmpJobTitle.getText() + ","
                                    + txtEmpContract.getText() + "," + txtEmpHourlyRate.getText());
                            break;
                        }
                    }

                    // Write the updated contents back to the file
                    Files.write(Paths.get("storage/employee_data.txt"), lines, StandardCharsets.UTF_8);

                    // Display a pop-up message to confirm the data has been saved
                    JOptionPane.showMessageDialog(null, "Employee data overwritten.");
                } catch (IOException ex) {
                    // Display a pop-up message if there was an error writing to the file
                    JOptionPane.showMessageDialog(null, "Error writing to file.");
                }
            } else {
                // Clear employee ID field to allow user to enter a new ID
                txtEmployeeID.setText("");
                // Display a pop-up message to inform the user to enter a new ID
                JOptionPane.showMessageDialog(null, "Please choose a different employee ID.");
            }
        } else {
            try {
                // Create a FileWriter object that writes to a file called "employee_data.txt"
                FileWriter emptxtfile = new FileWriter("storage/employee_data.txt", true);
                // Write the data to the file
                emptxtfile.write(txtEmployeeID.getText() + "," + txtEmpTitle.getText() + "," + txtEmpForename.getText() + ","
                        + txtEmpSurname.getText() + "," + txtEmpGender.getText() + "," + txtEmpJobTitle.getText() + ","
                        + txtEmpContract.getText() + "," + txtEmpHourlyRate.getText() + "\n");
                // Close the FileWriter object
                emptxtfile.close();
                // Display a pop-up message to confirm the data has been saved
                JOptionPane.showMessageDialog(null, "Employee data saved to file.");
            } catch(IOException ex) {
                // Display a pop-up message if there was an error writing to the file
                JOptionPane.showMessageDialog(null, "Error writing to file.");
            }
        }
    }

    }//GEN-LAST:event_btnEmpSaveActionPerformed

    /**
     * This is the employee menu button, this redirects the user to the employee main menu.
     * @author Jack Holmes (50053641)
     */
    private void btnEmpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMenuActionPerformed
        Employee_Main_Menu employeeMenu = new Employee_Main_Menu();
        // Makes the View_Employee frame visible
        
        employeeMenu.setVisible(true);
        // Makes the current frame invisible if needed
        
        this.setVisible(false);
    }//GEN-LAST:event_btnEmpMenuActionPerformed

    /**
     * This is the validation for the employee title text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpJobTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpJobTitleKeyReleased
        // TODO add your handling code here:
        String makeOne = txtEmpJobTitle.getText();
        String EmpJobTitle = makeOne.replace(" ","");
        
        // Calling Function
        if(isAlpha(EmpJobTitle)){
            // If text is correct
            txtEmpJobTitle.setText(makeOne);
            txtEmpJobTitle.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a number
            txtEmpJobTitle.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Digits or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpJobTitle.setText("");
            txtEmpJobTitle.grabFocus();
        }
    }//GEN-LAST:event_txtEmpJobTitleKeyReleased
 /**
     * This is the validation for the employee ID text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmployeeIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmployeeIDKeyReleased
        // TODO add your handling code here:
        String EmployeeID = txtEmployeeID.getText().replace(" ", "");
        // Calling Function
        if(isNumeric(EmployeeID)){
            // If text is Good
            txtEmployeeID.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a letter or special character
            txtEmployeeID.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Letters or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmployeeID.setText("");
            txtEmployeeID.grabFocus();

        }
    }//GEN-LAST:event_txtEmployeeIDKeyReleased
 /**
     * This is the validation for the employee title text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpTitleKeyReleased
        // TODO add your handling code here:
        String makeOne = txtEmpTitle.getText();
        String Title = makeOne.replace(" ","");
        
        // Calling Function
        if(isAlpha(Title)){
            // If text is correct
            txtEmpTitle.setText(makeOne);
            txtEmpTitle.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a number
            txtEmpTitle.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Digits or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpTitle.setText("");
            txtEmpTitle.grabFocus();
        }
    }//GEN-LAST:event_txtEmpTitleKeyReleased

    /**
     * This is the validation for the employee forename text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpForenameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpForenameKeyReleased
        // TODO add your handling code here:
        
        String makeOne = txtEmpForename.getText();
        String EmpForename = makeOne.replace(" ","");
        
        // Calling Function
        if(isAlpha(EmpForename)){
            // If text is correct
            txtEmpForename.setText(makeOne);
            txtEmpForename.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a number
            txtEmpForename.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Digits or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpForename.setText("");
            txtEmpForename.grabFocus();
        }
    }//GEN-LAST:event_txtEmpForenameKeyReleased

     /**
     * This is the validation for the employee surname text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpSurnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpSurnameKeyReleased
        // TODO add your handling code here:
        String makeOne = txtEmpSurname.getText();
        String EmpSurname = makeOne.replace(" ","");
        
        // Calling Function
        if(isAlpha(EmpSurname)){
            // If text is correct
            txtEmpSurname.setText(makeOne);
            txtEmpSurname.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a number
            txtEmpSurname.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Digits or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpSurname.setText("");
            txtEmpSurname.grabFocus();
        }
    }//GEN-LAST:event_txtEmpSurnameKeyReleased

     /**
     * This is the validation for the employee gender text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpGenderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpGenderKeyReleased
        // TODO add your handling code here:
        String makeOne = txtEmpGender.getText();
        String EmpGender = makeOne.replace(" ","");
        
        // Calling Function
        if(isAlpha(EmpGender)){
            // If text is correct
            txtEmpGender.setText(makeOne);
            txtEmpGender.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a number
            txtEmpGender.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Digits or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpGender.setText("");
            txtEmpGender.grabFocus();
        }
    }//GEN-LAST:event_txtEmpGenderKeyReleased

     /**
     * This is the validation for the employee contract text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpContractKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpContractKeyReleased
        // TODO add your handling code here:
        String EmpContract = txtEmpContract.getText().replace(" ", "");
        // Calling Function
        if(isNumeric(EmpContract)){
            // If text is Good
            txtEmpContract.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a letter or special character
            txtEmpContract.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Letters or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpContract.setText("");
            txtEmpContract.grabFocus();

        }
    }//GEN-LAST:event_txtEmpContractKeyReleased

     /**
     * This is the validation for the employee hourly rate text box
     * @author Jack Holmes (50053641)
     */
    private void txtEmpHourlyRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpHourlyRateKeyReleased
        // TODO add your handling code here:
        String EmpHourlyRate = txtEmpHourlyRate.getText().replace(" ", "");
        // Calling Function
        if(isNumeric(EmpHourlyRate)){
            // If text is Good
            txtEmpHourlyRate.setEditable(true);
        }
        else{
            // Not able to enter in text field if value a letter or special character
            txtEmpHourlyRate.setEditable(false);
            // Set Error Message
            JOptionPane.showMessageDialog(null, "Cannot Enter Letters or Special Characters?", "Error Message",JOptionPane.PLAIN_MESSAGE);
            txtEmpHourlyRate.setText("");
            txtEmpHourlyRate.grabFocus();

        }
    }//GEN-LAST:event_txtEmpHourlyRateKeyReleased
    public static boolean isAlpha(String s) {
        return s != null && s.chars().allMatch(Character::isLetter);
    }
    
    public static boolean isNumeric(String str) {
        return str != null && str.chars().allMatch(Character::isDigit);
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modify_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modify_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modify_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modify_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modify_Employee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmpMenu;
    private javax.swing.JButton btnEmpReset1;
    private javax.swing.JButton btnEmpSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblEmpContract;
    private javax.swing.JLabel lblEmpForename;
    private javax.swing.JLabel lblEmpGender;
    private javax.swing.JLabel lblEmpHourlyRate;
    private javax.swing.JLabel lblEmpJobTitle;
    private javax.swing.JLabel lblEmpSurname;
    private javax.swing.JLabel lblEmpTitle;
    private javax.swing.JLabel lblEmployeeID1;
    private javax.swing.JLabel lblModifyEmployee;
    private javax.swing.JPanel pnlModifyEmployee;
    private javax.swing.JTextField txtEmpContract;
    private javax.swing.JTextField txtEmpForename;
    private javax.swing.JTextField txtEmpGender;
    private javax.swing.JTextField txtEmpHourlyRate;
    private javax.swing.JTextField txtEmpJobTitle;
    private javax.swing.JTextField txtEmpSurname;
    private javax.swing.JTextField txtEmpTitle;
    private javax.swing.JTextField txtEmployeeID;
    // End of variables declaration//GEN-END:variables
}
